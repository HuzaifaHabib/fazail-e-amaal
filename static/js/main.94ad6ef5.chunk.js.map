{"version":3,"sources":["../node_modules/pdfjs-dist/build sync","FAZAIL_E_AAMAAL.pdf","components/Search.js","components/Navigation.js","components/PDF.js","components/Footer.js","App.js","serviceWorker.js","index.js"],"names":["webpackEmptyContext","req","e","Error","code","keys","resolve","module","exports","id","__webpack_require__","p","Search","_ref","searchValue","onChangeSearchHandler","search","react_default","a","createElement","className","type","placeholder","value","onChange","onClick","Navigation","goToPrevPage","goToNextPage","pageNumber","disabled","PDF","onDocumentLoadSuccess","entry","file","pdffa","onLoadSuccess","Footer","href","target","rel","pdfjs","GlobalWorkerOptions","workerSrc","concat","version","App","state","numPages","_this","setState","_this$state","this","Search_Search","Navigation_Navigation","PDF_PDF","Footer_Footer","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.94ad6ef5.chunk.js","sourcesContent":["function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 21;","module.exports = __webpack_public_path__ + \"static/media/FAZAIL_E_AAMAAL.6e3895ab.pdf\";","import React from \"react\";\r\n\r\nexport const Search = ({ searchValue, onChangeSearchHandler, search }) => {\r\n  return (\r\n    <div className=\"search\">\r\n      <input\r\n        type=\"number\"\r\n        placeholder=\"Type Page Number\"\r\n        value={searchValue}\r\n        onChange={e => onChangeSearchHandler(e)}\r\n        className=\"searchTerm\"\r\n      />\r\n      <button onClick={search} className=\"searchButton\">\r\n        <i className=\"fa fa-search\" />\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n","import React from \"react\";\r\n\r\nexport const Navigation = ({ goToPrevPage, goToNextPage, pageNumber }) => {\r\n  return (\r\n    <nav className=\"nav-buttons\">\r\n      <button onClick={goToPrevPage} disabled={pageNumber === 1 ? true : false}>\r\n        &lt;&lt;\r\n      </button>\r\n      <button\r\n        onClick={goToNextPage}\r\n        disabled={pageNumber === 833 ? true : false}\r\n      >\r\n        &gt;&gt;\r\n      </button>\r\n    </nav>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { Document, Page } from \"react-pdf\";\r\nimport pdffa from \"../FAZAIL_E_AAMAAL.pdf\";\r\n\r\nexport const PDF = ({ onDocumentLoadSuccess, pageNumber }) => {\r\n  return (\r\n    <Document\r\n      file={pdffa}\r\n      onLoadSuccess={onDocumentLoadSuccess}\r\n      className=\"center-pdf\"\r\n    >\r\n      <Page pageNumber={pageNumber} />\r\n    </Document>\r\n  );\r\n};\r\n","import React from \"react\";\r\n\r\nexport const Footer = () => {\r\n  return (\r\n    <footer>\r\n      <p className=\"footerText\">\r\n        Made with Love by{\" \"}\r\n        <a\r\n          href=\"http://github.com/nomangul\"\r\n          target=\"_blank\"\r\n          rel=\"noopener noreferrer\"\r\n        >\r\n          Noman Gul\r\n        </a>\r\n      </p>\r\n    </footer>\r\n  );\r\n};\r\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport { pdfjs } from \"react-pdf\";\nimport { Search } from \"./components/Search\";\nimport { Navigation } from \"./components/Navigation\";\nimport { PDF } from \"./components/PDF\";\nimport { Footer } from \"./components/Footer\";\n\npdfjs.GlobalWorkerOptions.workerSrc = `//cdnjs.cloudflare.com/ajax/libs/pdf.js/${\n  pdfjs.version\n}/pdf.worker.js`;\n\nclass App extends Component {\n  state = {\n    numPages: null,\n    pageNumber: 1,\n    searchValue: \"\"\n  };\n\n  onDocumentLoadSuccess = ({ numPages }) => {\n    this.setState({ numPages });\n  };\n\n  goToPrevPage = () =>\n    this.setState(state => ({ pageNumber: state.pageNumber - 1 }));\n  goToNextPage = () =>\n    this.setState(state => ({ pageNumber: state.pageNumber + 1 }));\n\n  onChangeSearchHandler = e => {\n    this.setState({ searchValue: e.target.value });\n  };\n\n  search = () => {\n    this.setState(state => ({ pageNumber: +state.searchValue }));\n  };\n\n  render() {\n    const { pageNumber, numPages } = this.state;\n\n    return (\n      <div>\n        <div className=\"wrap\">\n          <Search\n            searchValue={this.state.searchValue}\n            onChangeSearchHandler={this.onChangeSearchHandler}\n            search={this.search}\n          />\n          <p>\n            Page {pageNumber} of {numPages}\n          </p>\n          <Navigation\n            goToPrevPage={this.goToPrevPage}\n            goToNextPage={this.goToNextPage}\n            pageNumber={pageNumber}\n          />\n        </div>\n\n        <div className=\"center-pdf\">\n          <PDF\n            onDocumentLoadSuccess={this.onDocumentLoadSuccess}\n            pageNumber={pageNumber}\n          />\n        </div>\n        <Footer />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}